// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  provider  Provider
  name      String?
  email     String?
  image     String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   Member[]
  sentNotifications Notify[] @relation("NotifyFrom")
  receivedNotifications Notify[] @relation("NotifyTo")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  members     Member[]
  tables      Table[]
  notifications Notify[]
}

model Member {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      Role
  createdAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
}

model Table {
  id        String     @id @default(cuid())
  name      String
  projectId String
  color     String
  isExpanded Boolean   @default(true)
  isEditing  Boolean    @default(false)
  position   Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  columns    Column[]
  project    Project   @relation(fields: [projectId], references: [id])
}

model Column {
  id            String             @id @default(cuid())
  name          String
  type          ColumnType
  tableId       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  columnConstraints   ColumnConstraint[]
  table         Table   @relation(fields: [tableId], references: [id])
}

model ColumnConstraint {
  id        String @id @default(cuid())
  type      ColumnConstraintType
  constraintValue String?
  columnId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  column    Column @relation(fields: [columnId], references: [id])
}

model Notify {
  id          String    @id @default(cuid())
  fromUserId  String
  toUserId    String
  projectId   String?
  type        NotifyType
  message     String?
  isRead      Boolean   @default(false)
  isRejected  Boolean   @default(false)
  isAccepted  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  fromUser    User      @relation("NotifyFrom", fields: [fromUserId], references: [id])
  toUser      User      @relation("NotifyTo", fields: [toUserId], references: [id])
  project     Project?  @relation(fields: [projectId], references: [id])

  @@index([toUserId])
  @@unique([fromUserId, toUserId, projectId])
}

enum Provider {
  google
  github
}

enum Role {
  owner
  admin
  editor
  member
}

enum ColumnType {
  INT
  VARCHAR
  BOOLEAN
  DATE
  TEXT
  FLOAT
  DOUBLE
}

enum ColumnConstraintType {
  PRIMARY_KEY
  NOT_NULL
  UNIQUE
  FOREIGN_KEY
  CHECK
  DEFAULT
}

enum NotifyType {
  INVITATION
}